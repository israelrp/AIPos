//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.34014
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AIPos.DekstopLayer.ServiceEntrada {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceEntrada.ISEntrada")]
    public interface ISEntrada {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISEntrada/SelectAll", ReplyAction="http://tempuri.org/ISEntrada/SelectAllResponse")]
        AIPos.Domain.Entrada[] SelectAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISEntrada/SelectAll", ReplyAction="http://tempuri.org/ISEntrada/SelectAllResponse")]
        System.Threading.Tasks.Task<AIPos.Domain.Entrada[]> SelectAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISEntrada/SelectByDay", ReplyAction="http://tempuri.org/ISEntrada/SelectByDayResponse")]
        AIPos.Domain.Entrada[] SelectByDay(int SucursalId, long Day);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISEntrada/SelectByDay", ReplyAction="http://tempuri.org/ISEntrada/SelectByDayResponse")]
        System.Threading.Tasks.Task<AIPos.Domain.Entrada[]> SelectByDayAsync(int SucursalId, long Day);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISEntrada/Insert", ReplyAction="http://tempuri.org/ISEntrada/InsertResponse")]
        AIPos.Domain.Entrada Insert(AIPos.Domain.Entrada entrada);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISEntrada/Insert", ReplyAction="http://tempuri.org/ISEntrada/InsertResponse")]
        System.Threading.Tasks.Task<AIPos.Domain.Entrada> InsertAsync(AIPos.Domain.Entrada entrada);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISEntrada/Delete", ReplyAction="http://tempuri.org/ISEntrada/DeleteResponse")]
        void Delete(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISEntrada/Delete", ReplyAction="http://tempuri.org/ISEntrada/DeleteResponse")]
        System.Threading.Tasks.Task DeleteAsync(int Id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISEntradaChannel : AIPos.DekstopLayer.ServiceEntrada.ISEntrada, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SEntradaClient : System.ServiceModel.ClientBase<AIPos.DekstopLayer.ServiceEntrada.ISEntrada>, AIPos.DekstopLayer.ServiceEntrada.ISEntrada {
        
        public SEntradaClient() {
        }
        
        public SEntradaClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SEntradaClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SEntradaClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SEntradaClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public AIPos.Domain.Entrada[] SelectAll() {
            return base.Channel.SelectAll();
        }
        
        public System.Threading.Tasks.Task<AIPos.Domain.Entrada[]> SelectAllAsync() {
            return base.Channel.SelectAllAsync();
        }
        
        public AIPos.Domain.Entrada[] SelectByDay(int SucursalId, long Day) {
            return base.Channel.SelectByDay(SucursalId, Day);
        }
        
        public System.Threading.Tasks.Task<AIPos.Domain.Entrada[]> SelectByDayAsync(int SucursalId, long Day) {
            return base.Channel.SelectByDayAsync(SucursalId, Day);
        }
        
        public AIPos.Domain.Entrada Insert(AIPos.Domain.Entrada entrada) {
            return base.Channel.Insert(entrada);
        }
        
        public System.Threading.Tasks.Task<AIPos.Domain.Entrada> InsertAsync(AIPos.Domain.Entrada entrada) {
            return base.Channel.InsertAsync(entrada);
        }
        
        public void Delete(int Id) {
            base.Channel.Delete(Id);
        }
        
        public System.Threading.Tasks.Task DeleteAsync(int Id) {
            return base.Channel.DeleteAsync(Id);
        }
    }
}
