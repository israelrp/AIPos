//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.34014
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AIPos.DekstopLayer.ServiceCliente {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceCliente.ISCliente")]
    public interface ISCliente {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISCliente/SelectAll", ReplyAction="http://tempuri.org/ISCliente/SelectAllResponse")]
        AIPos.Domain.Cliente[] SelectAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISCliente/SelectAll", ReplyAction="http://tempuri.org/ISCliente/SelectAllResponse")]
        System.Threading.Tasks.Task<AIPos.Domain.Cliente[]> SelectAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISCliente/SelectById", ReplyAction="http://tempuri.org/ISCliente/SelectByIdResponse")]
        AIPos.Domain.Cliente SelectById(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISCliente/SelectById", ReplyAction="http://tempuri.org/ISCliente/SelectByIdResponse")]
        System.Threading.Tasks.Task<AIPos.Domain.Cliente> SelectByIdAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISCliente/SelectByCodigo", ReplyAction="http://tempuri.org/ISCliente/SelectByCodigoResponse")]
        AIPos.Domain.Cliente SelectByCodigo(int Codigo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISCliente/SelectByCodigo", ReplyAction="http://tempuri.org/ISCliente/SelectByCodigoResponse")]
        System.Threading.Tasks.Task<AIPos.Domain.Cliente> SelectByCodigoAsync(int Codigo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISCliente/Insert", ReplyAction="http://tempuri.org/ISCliente/InsertResponse")]
        AIPos.Domain.Cliente Insert(AIPos.Domain.Cliente cliente);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISCliente/Insert", ReplyAction="http://tempuri.org/ISCliente/InsertResponse")]
        System.Threading.Tasks.Task<AIPos.Domain.Cliente> InsertAsync(AIPos.Domain.Cliente cliente);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISCliente/Update", ReplyAction="http://tempuri.org/ISCliente/UpdateResponse")]
        AIPos.Domain.Cliente Update(AIPos.Domain.Cliente cliente);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISCliente/Update", ReplyAction="http://tempuri.org/ISCliente/UpdateResponse")]
        System.Threading.Tasks.Task<AIPos.Domain.Cliente> UpdateAsync(AIPos.Domain.Cliente cliente);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISClienteChannel : AIPos.DekstopLayer.ServiceCliente.ISCliente, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SClienteClient : System.ServiceModel.ClientBase<AIPos.DekstopLayer.ServiceCliente.ISCliente>, AIPos.DekstopLayer.ServiceCliente.ISCliente {
        
        public SClienteClient() {
        }
        
        public SClienteClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SClienteClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SClienteClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SClienteClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public AIPos.Domain.Cliente[] SelectAll() {
            return base.Channel.SelectAll();
        }
        
        public System.Threading.Tasks.Task<AIPos.Domain.Cliente[]> SelectAllAsync() {
            return base.Channel.SelectAllAsync();
        }
        
        public AIPos.Domain.Cliente SelectById(int Id) {
            return base.Channel.SelectById(Id);
        }
        
        public System.Threading.Tasks.Task<AIPos.Domain.Cliente> SelectByIdAsync(int Id) {
            return base.Channel.SelectByIdAsync(Id);
        }
        
        public AIPos.Domain.Cliente SelectByCodigo(int Codigo) {
            return base.Channel.SelectByCodigo(Codigo);
        }
        
        public System.Threading.Tasks.Task<AIPos.Domain.Cliente> SelectByCodigoAsync(int Codigo) {
            return base.Channel.SelectByCodigoAsync(Codigo);
        }
        
        public AIPos.Domain.Cliente Insert(AIPos.Domain.Cliente cliente) {
            return base.Channel.Insert(cliente);
        }
        
        public System.Threading.Tasks.Task<AIPos.Domain.Cliente> InsertAsync(AIPos.Domain.Cliente cliente) {
            return base.Channel.InsertAsync(cliente);
        }
        
        public AIPos.Domain.Cliente Update(AIPos.Domain.Cliente cliente) {
            return base.Channel.Update(cliente);
        }
        
        public System.Threading.Tasks.Task<AIPos.Domain.Cliente> UpdateAsync(AIPos.Domain.Cliente cliente) {
            return base.Channel.UpdateAsync(cliente);
        }
    }
}
