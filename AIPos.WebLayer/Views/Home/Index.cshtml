@{
    ViewBag.Title = "Dashboard";
}
<div style="margin-top:15px; margin-bottom:20px; text-align:center;">
    <h2>Dashboard</h2>
</div>
<style>
    .contenedor-dockzone{
        float:left;
        margin-left:10px;
    }
</style>

<script type="text/javascript">
    //<![CDATA[
    var textSeparator = ";";
    function OnListBoxSelectionChanged(listBox, args) {        
        UpdateText();
    }
    function UpdateSelectAllItemState() {
        IsAllSelected() ? checkListBox.SelectIndices([0]) : checkListBox.UnselectIndices([0]);
    }
    function IsAllSelected() {
        for (var i = 1; i < checkListBox.GetItemCount() ; i++)
            if (!checkListBox.GetItem(i).selected)
                return false;
        return true;
    }
    function UpdateText() {
        var selectedItems = checkListBox.GetSelectedItems();
        checkComboBox.SetText(GetSelectedItemsText(selectedItems));
    }
    function SynchronizeListBoxValues(dropDown, args) {
        checkListBox.UnselectAll();
        var texts = dropDown.GetText().split(textSeparator);
        var values = GetValuesByTexts(texts);
        checkListBox.SelectValues(values);
        UpdateSelectAllItemState();
        UpdateText(); // for remove non-existing texts
    }
    function GetSelectedItemsText(items) {
        var texts = [];
        for (var i = 0; i < items.length; i++)
            texts.push(items[i].text);
        return texts.join(textSeparator);
    }
    function GetValuesByTexts(texts) {
        var actualValues = [];
        var item;
        for (var i = 0; i < texts.length; i++) {
            item = checkListBox.FindItemByText(texts[i]);
            if (item != null)
                actualValues.push(item.value);
        }
        return actualValues;
    }
    // ]]>
</script>

<div style="margin:0px auto;">
    <div style="width:760px; margin:0px auto;">
        @Html.DevExpress().DockZone(settings =>
        {
            settings.Name = "DockZone1";
            settings.ZoneUID = "Zone1";
            settings.AllowGrowing = true;
            settings.Width = 780;
        }).GetHtml()
    </div>
    <div class="contenedor-dockzone">
        @Html.DevExpress().DockZone(settings =>
                {
                    settings.Name = "DockZone4";
                    settings.ZoneUID = "Zone4";
                    settings.AllowGrowing = true;
                    settings.Width = 1200;
                }).GetHtml()
    </div>

    <div class="contenedor-dockzone">
        @Html.DevExpress().DockZone(settings =>
                {
                    settings.Name = "DockZone2";
                    settings.ZoneUID = "Zone2";
                    settings.AllowGrowing = true;
                    settings.Width = 535;
                }).GetHtml()
    </div>

    <div class="contenedor-dockzone">
        @Html.DevExpress().DockZone(settings =>
                {
                    settings.Name = "DockZone3";
                    settings.ZoneUID = "Zone3";
                    settings.AllowGrowing = true;
                    settings.Width = 570;
                }).GetHtml()
    </div>



    <div class="contenedor-dockzone">
        @Html.DevExpress().DockZone(settings =>
                {
                    settings.Name = "DockZone5";
                    settings.ZoneUID = "Zone5";
                    settings.AllowGrowing = true;
                    settings.Width = 1200;
                }).GetHtml()
    </div>

    <div class="contenedor-dockzone">
        @Html.DevExpress().DockZone(settings =>
                {
                    settings.Name = "DockZone6";
                    settings.ZoneUID = "Zone6";
                    settings.AllowGrowing = true;
                    settings.Width = 680;
                }).GetHtml()
    </div>
</div>

@{
    MenuSettings menusettings = new MenuSettings();
    menusettings.Name = "toolbar";
    menusettings.ShowAsToolbar = true;

    menusettings.Items.Add(new MVCxMenuItem(string.Empty, "mnuPrint", "~/Images/BtnPrint.png")
    {
        ToolTip = "Print the chart"
    });

    menusettings.Items.Add(new MVCxMenuItem(string.Empty, "mnuSaveToDisk", "~/Images/BtnSave.png")
    {
        ToolTip = "Export a chart and save it to the disk",
        BeginGroup = true
    });

    menusettings.Items.Add(new MVCxMenuItem(string.Empty, "mnuSaveToWindow", "~/Images/BtnSaveWindow.png")
    {
        ToolTip = "Export a chart and show it in a new window"
    });

    MVCxMenuItem mnuFormat = new MVCxMenuItem();
    mnuFormat.Name = "mnuFormat";
    ComboBoxSettings cbFormatSettings = new ComboBoxSettings();
    cbFormatSettings.Name = "cbFormat";
    cbFormatSettings.SelectedIndex = 0;
    cbFormatSettings.Width = 60;
    
    cbFormatSettings.Properties.Items.Add("pdf");
    cbFormatSettings.Properties.Items.Add("xls");
    cbFormatSettings.Properties.Items.Add("png");
    
    mnuFormat.SetTextTemplateContent(c =>
    {
        Html.DevExpress().ComboBox(cbFormatSettings).Render();
    });
    DevExpress.Web.ASPxMenu.MenuItemStyle itemStyle = new DevExpress.Web.ASPxMenu.MenuItemStyle();
    itemStyle.Assign(mnuFormat.ItemStyle);
    mnuFormat.ItemStyle.Assign(itemStyle);
    menusettings.Items.Add(mnuFormat);

    menusettings.ClientSideEvents.ItemClick = "function(s, e) { if (e.item.name == 'mnuPrint') chart.Print(); if (e.item.name == 'mnuSaveToDisk') chart.SaveToDisk(cbFormat.GetText()); if (e.item.name == 'mnuSaveToWindow') chart.SaveToWindow(cbFormat.GetText()); }";
}


@Html.DevExpress().DockPanel(settings =>
{
    settings.Name = "DockPanel1";
    settings.HeaderText = "Ventas";
    settings.AllowedDockState = AllowedDockState.DockedOnly;
    settings.OwnerZoneUID = "Zone1";
    settings.ShowCloseButton = false;
    settings.Height = 600;
    settings.SetContent(() =>
    {
        ViewContext.Writer.Write(Html.DevExpress().Menu(menusettings).GetHtml());        
        ViewContext.Writer.Write("<table><tr><td><span>Semana:</span>");
        ViewContext.Writer.Write(
            @Html.DevExpress().ComboBox(s =>
            {
                s.Name = "ComboBoxSemanas";
                s.Properties.IncrementalFilteringMode = IncrementalFilteringMode.StartsWith;
                s.Properties.DropDownStyle = DropDownStyle.DropDown;
                s.Properties.TextField = "Nombre";
                s.Properties.ValueField = "Numero";
                s.SelectedIndex = ((int)ViewData["SemanaActual"]) - 1;
            }).BindList(ViewData["Semanas"]).GetHtml()
        );
        ViewContext.Writer.Write("</td><td><span>Año:</span>");
        ViewContext.Writer.Write(
            @Html.DevExpress().ComboBox(s =>
            {
                s.Name = "ComboBoxAnios";
                s.Properties.IncrementalFilteringMode = IncrementalFilteringMode.StartsWith;
                s.Properties.DropDownStyle = DropDownStyle.DropDown;
                s.SelectedIndex = (int)ViewData["AnioActual"];
            }).BindList(ViewData["Anios"]).GetHtml()
        );
        ViewContext.Writer.Write("</td><td><span>Sucursal:</span>");
        ViewContext.Writer.Write(
            @Html.DevExpress().DropDownEdit(s =>
            {
                s.Name = "checkComboBox";                                
                s.Width = 210;
                s.Properties.AnimationType = AnimationType.None;
                s.Properties.ClientSideEvents.TextChanged = "SynchronizeListBoxValues";
                s.Properties.ClientSideEvents.DropDown = "SynchronizeListBoxValues";
                s.SetDropDownWindowTemplateContent(c =>
                {
                    @Html.DevExpress().ListBox(listBoxSettings =>                        
                        {
                            listBoxSettings.Name = "checkListBox";                            
                            listBoxSettings.ControlStyle.Border.BorderWidth = 0;
                            listBoxSettings.ControlStyle.BorderBottom.BorderWidth = 1;
                            listBoxSettings.ControlStyle.BorderBottom.BorderColor = System.Drawing.Color.FromArgb(0xDCDCDC);
                            listBoxSettings.Width = System.Web.UI.WebControls.Unit.Percentage(100);

                            listBoxSettings.Properties.SelectionMode = ListEditSelectionMode.CheckColumn;
                            listBoxSettings.Properties.ValueField = "Id";
                            listBoxSettings.Properties.TextField="Nombre";

                            listBoxSettings.Properties.ClientSideEvents.SelectedIndexChanged = "OnListBoxSelectionChanged";
                        }
                    ).BindList(ViewData["Sucursales"])
                    .Render();
                });
            }).GetHtml()
        );
        ViewContext.Writer.Write("</td><td>");
        ViewContext.Writer.Write(
            @Html.DevExpress().Button(s =>
            {
                s.Name = "btnConsultar";
                s.Text = "Consultar";
                s.UseSubmitBehavior = false;
                s.ClientSideEvents.Click = " function(s,e){ chart.PerformCallback(); } ";
            }).GetHtml()
        );
        ViewContext.Writer.Write("</td></tr></table>");
        ViewContext.Writer.Write(Html.Action("_ResumenVentas"));
    });
}).GetHtml()

@Html.DevExpress().DockPanel(settings =>
{
    settings.Name = "DockPanel2";
    settings.HeaderText = "Pedidos de sucursales";
    settings.AllowedDockState = AllowedDockState.DockedOnly;
    settings.OwnerZoneUID = "Zone2";
    settings.ShowCloseButton = false;
    settings.Height = 300;
    settings.SetContent(() =>
    {
        ViewContext.Writer.Write(
            @Html.DevExpress().ComboBox(s =>
            {
                s.Name = "ComboBoxPedidos";
                s.Properties.IncrementalFilteringMode = IncrementalFilteringMode.StartsWith;
                s.Properties.DropDownStyle = DropDownStyle.DropDown;
                s.Properties.TextField = "Nombre";
                s.Properties.ValueField = "Id";
                s.Properties.ClientSideEvents.SelectedIndexChanged = "function(s,e){ gvPedidosSucursal.PerformCallback(); }";
            }).BindList(ViewData["Sucursales"]).GetHtml()
        );
        ViewContext.Writer.Write(Html.Action("_RecuperarPedidosSucursal"));
    });
}).GetHtml()

@Html.DevExpress().DockPanel(settings =>
{
    settings.Name = "DockPanel3";
    settings.HeaderText = "Time delivery";
    settings.AllowedDockState = AllowedDockState.DockedOnly;
    settings.OwnerZoneUID = "Zone3";
    settings.ShowCloseButton = false;
    settings.Height = 300;
    settings.SetContent(() =>
    {
        ViewContext.Writer.Write(
            @Html.DevExpress().ComboBox(s =>
            {
                s.Name = "ComboBoxSucursalEnvios";
                s.Properties.IncrementalFilteringMode = IncrementalFilteringMode.StartsWith;
                s.Properties.DropDownStyle = DropDownStyle.DropDown;
                s.Properties.TextField = "Nombre";
                s.Properties.ValueField = "Id";
                s.Properties.ClientSideEvents.SelectedIndexChanged = "function(s,e){ gvSeguimientos.PerformCallback(); }";
            }).BindList(ViewData["Sucursales"]).GetHtml()
        );
        ViewContext.Writer.Write(Html.Action("_RecuperarSeguimientosServiciosApartados"));
    });
}).GetHtml()

@Html.DevExpress().DockPanel(settings =>
{
    settings.Name = "DockPanel4";
    settings.HeaderText = "Cortes de caja";
    settings.AllowedDockState = AllowedDockState.DockedOnly;
    settings.OwnerZoneUID = "Zone4";
    settings.ShowCloseButton = false;
    settings.Height = 300;
    settings.SetContent(() =>
    {
        ViewContext.Writer.Write(Html.Action("_RecuperarCortesCaja"));
    });
}).GetHtml()

@Html.DevExpress().DockPanel(settings =>
{
    settings.Name = "DockPanel5";
    settings.HeaderText = "Entradas";
    settings.AllowedDockState = AllowedDockState.DockedOnly;
    settings.OwnerZoneUID = "Zone5";
    settings.ShowCloseButton = false;
    settings.Height = 300;
    settings.SetContent(() =>
    {
        ViewContext.Writer.Write(
            @Html.DevExpress().ComboBox(s =>
            {
                s.Name = "ComboBoxSucursalEntradas";
                s.Properties.IncrementalFilteringMode = IncrementalFilteringMode.StartsWith;
                s.Properties.DropDownStyle = DropDownStyle.DropDown;
                s.Properties.TextField = "Nombre";
                s.Properties.ValueField = "Id";
                s.Properties.ClientSideEvents.SelectedIndexChanged = "function(s,e){ gvEntradas.PerformCallback(); }";
            }).BindList(ViewData["Sucursales"]).GetHtml()
        );
        ViewContext.Writer.Write(Html.Action("_RecuperarEntradas"));
    });
}).GetHtml()

@Html.DevExpress().DockPanel(settings =>
{
    settings.Name = "DockPanel6";
    settings.HeaderText = "Retiros dinero";
    settings.AllowedDockState = AllowedDockState.DockedOnly;
    settings.OwnerZoneUID = "Zone6";
    settings.ShowCloseButton = false;
    settings.Height = 300;
    settings.SetContent(() =>
    {
        ViewContext.Writer.Write(
            @Html.DevExpress().ComboBox(s =>
            {
                s.Name = "ComboBoxSucursalRetirosDinero";
                s.Properties.IncrementalFilteringMode = IncrementalFilteringMode.StartsWith;
                s.Properties.DropDownStyle = DropDownStyle.DropDown;
                s.Properties.TextField = "Nombre";
                s.Properties.ValueField = "Id";
                s.Properties.ClientSideEvents.SelectedIndexChanged = "function(s,e){ gvRetirosDinero.PerformCallback(); }";
            }).BindList(ViewData["Sucursales"]).GetHtml()
        );
        ViewContext.Writer.Write(Html.Action("_RecuperarRetiros"));
    });
}).GetHtml()
